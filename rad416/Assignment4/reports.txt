problem1.py
-XX and HH don't have any population. They are being filtered out
-Only fields necessary for the assignment are loaded into the database
-The boroughs.csv file has duplicate entries for every zipcode. Removed with a SELECT DISTINCT from initial boroughs_raw and SELECT into new table (boroughs) and dropping the old table
-Dropping addresses with commas in them because there's no way to know where the relevant information is in the file. Writing code for the handful of edge cases doesn't seem important as it doesn't meaningfully affect the results
-Only the first 5 digits of a zipcode are used (I drop the presort code)
-I only use zipcodes in NY State and drop all other zipcodes as not germane to the tasks.
Schema is as follows:
  CREATE TABLE zipcode_population ( 
    zcta INT, 
    total_population INT, 
    area NUMERIC(10,9) 
    );
  CREATE TABLE boroughs ( 
    zipcode INT, 
    borough VARCHAR(40) 
    );
  CREATE TABLE incidents ( 
    address VARCHAR(255), 
    zipcode INT, 
    incidents INT 
    );

problem2.py
-filtering output for zipcodes not in New York State with test of null result (len > 0)
-NOTE: because these are ZCTAs, there are zipcodes that are in New York State that aren't in the list.  This is due to how zip codes and ZCTAs relate.   It's possible for a zipcode to be used by the Post Office but not be a ZCTA if it's not a majority zipcode in any census block.  This is true for 14722 in Chautauqua, NY.  While it's a valid zipcode, there is no corresponding ZCTA because it isn't a majority in the census block it's a part of.

problem3.py
-Since Staten Island is in the database as "Staten", the output is tested for "Staten" and "Island" is appended to output
-The processing is done purely in SQL with a subquery and a join with another subquery to generate the result

problem4.py
-removed any blank addresses within SQL query
-sorted output by address

problem5.py
-removed any blank addresses within SQL query
-sorted output by address

problem6.py
-output listed in order by zipcode